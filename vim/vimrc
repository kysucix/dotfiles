" vimrc
" Maintainer:   Silvano Galliani aka kysucix <kysucix@dyne.org>
" First Change:  end 2000
" Last Change:  2017 Apr
" Usage: copy it to
"     for Unix and OS/2:  ~/.vimrc
"         for Amiga:  s:.vimrc
"         for MS-DOS and Win32:  $VIM\_vimrc
"         for OpenVMS:  sys$login:.vimrc
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" To be more clear I've (almost) always used verbose version of option name (not the compact
" one).


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"					 GENERAL                                                "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"set nocompatible " Not compatibile with old vi " Deprecated: https://www.reddit.com/r/vim/wiki/vimrctips
filetype off
" Configure plugins with vundle
set runtimepath+=~/.vim/bundle/Vundle.vim
call vundle#rc()

 " let Vundle manage Vundle
 " required!
Bundle 'gmarik/vundle'

 " My Bundles here:
 "
 " original repos on github
Bundle 'Valloric/YouCompleteMe'
Bundle 'Valloric/ListToggle'
Bundle 'scrooloose/nerdcommenter'
Bundle 'vimoutliner/vimoutliner'
Bundle 'majutsushi/tagbar'
Bundle 'scrooloose/syntastic'
Bundle 'scrooloose/nerdtree'
Bundle 'tomasr/molokai'

" Sumblimetext-like multiedit
Bundle "terryma/vim-multiple-cursors"

Bundle "bronson/vim-trailing-whitespace"

Bundle 'nanotech/jellybeans.vim'

Bundle 'mileszs/ack.vim'
Bundle 'kien/ctrlp.vim'

" Better status line
Bundle 'bling/vim-airline'

" I will give it a try, I don't know if it's useful
Bundle 'Lokaltog/vim-easymotion'

Bundle 'tpope/vim-unimpaired'
Bundle 'tpope/vim-fugitive'
Bundle 'yegappan/mru'
Bundle 'kien/rainbow_parentheses.vim'
Bundle 'tpope/vim-surround'
"Bundle 'nathanaelkane/vim-indent-guides'
Bundle 'Mizuchi/STL-Syntax'
Bundle 'uarun/vim-protobuf'
"Bundle 'fatih/vim-go'
"Bundle 'davidhalter/jedi-vim'
Bundle 'altercation/vim-colors-solarized'
Bundle 'bling/vim-bufferline'
Bundle 'lervag/vimtex'
"Bundle 'LaTeX-Box-Team/LaTeX-Box'
Bundle 'rhysd/vim-clang-format'
Plugin 'tmhedberg/SimpylFold'
" Python plugins
Bundle 'klen/python-mode'
Bundle 'vim-scripts/indentpython.vim'
Bundle 'rdnetto/YCM-Generator'
Bundle 'jeaye/color_coded'
Bundle 'dhruvasagar/vim-markify'
Bundle 'cocopon/iceberg.vim'
Bundle 'junegunn/vim-easy-align'

Bundle 'colepeters/fira-for-powerline'
Bundle 'ludovicchabant/vim-gutentags'
"Bundle 'xuhdev/vim-latex-live-preview'
"Bundle 'machakann/vim-sandwich'
"Bundle 'Yggdroot/indentLine'
"Bundle 'unblevable/quick-scope'

"Plugin 'jnurmine/Zenburn'


" non github repos
"Bundle 'git://git.wincent.com/command-t.git'
"Bundle 'git://git.code.sf.net/p/vim-latex/vim-latex'
syntax on
filetype plugin indent on
" Force loading of new documentation
"Helptags()

runtime vimrc_example.vim  " needed to jump back to last known position in the file
runtime macros/matchit.vim  " match html tag and if/fi
"	runtime plugin/taglist.vim
behave xterm " Set behavior for mouse and selection.
if version >= 600 " Stuff which is only possible in vim 6..
    filetype plugin on
    filetype plugin indent on
    filetype indent on
    nmap ,e :Ex<CR> " Mapping for explorer.vim, a standard plugin in vim 6
endif
set history=1000      " keep 1000 lines of command line history
set cf " Read the error file and jump to the first error
"set clipboard=unnamedplus " yank and copy to X clipboard! :)
set viminfo=%,:20,<20,@20,/20,'50,\"100,n~/.vim/viminfo " the viminfo file is read upon startup and written when exiting Vim
"	set iskeyword+=-,$,@ " none of these should be word dividers, so make them not be
set iskeyword-=- " minus should not be a word divider
set confirm " if you :q with changes it asks you if you want to continue or not
set ttimeoutlen=1000 " 100 milliseconds for escape timeout instead of 1000

let g:tex_flavor='latex'


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"					 COLORS                                                 "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
syntax on " Show colors
set background=dark
" Different Color schemes
"colors ir_black
"colors darkblue
"colors default
"	colors desert
"	colorscheme solarized
colorscheme molokai
"colors elflord
"colors evening
"colors koehler
"colors morning
"colors murphy
"colors pablo
"colors peachpuff
"colors ron
"colors shine
"colors torte
"colors zellner
setlocal comments-=://

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"					 VIM UI                                                 "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" { START
    set linespace=0 " Number of pixel lines inserted between characters
    set ruler       " show the cursor position all the time
    " Height of the command bar
    set cmdheight=2
    set cursorline " Highlight the screen line of the cursor with CursorLine
    set cmdheight=1 " Number of screen lines to use for the command-line.
    set lazyredraw " do not redraw while running macros (much faster)
    set magic " For regular expressions turn magic on
    set gdefault " When on, the ":substitute" flag 'g' is default on.
    set backspace=indent,eol,start " allow backspacing over everything in insert mode
    set whichwrap+=<,>,h,l  " backspace and cursor keys wrap to
    set showcmd     " display incomplete commands down to the bottom
    set mouse=a " use mouse
    set mousemodel=popup          " right mouse button pops up a menu in the GUI
    let &guicursor = &guicursor . ",a:blinkon0"
    "	set hidden " Lets you change buffer without saving ;)
    set fillchars=vert:\ ,stl:\ ,stlnc:\ " select splitter rendering
    set clipboard=exclude:.*
    "set clipboard+=unnamed " share clipboard with windows clipboard
    "	set shortmess=atl
    set shortmess+=filmnrxoOtT " abbrev. of messages (avoids 'hit enter')
    let g:netrw_silent = 1
"} END
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"					 VISUAL CLUES                                           "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set showmatch " When a bracket is inserted, briefly jump to the matching one.
set matchtime=5 " How many tenths of a second to blink when matching brackets
" set smartindent " braces affect autoindentation DEPRECATED OPTION:https://www.reddit.com/r/vim/wiki/vimrctips#wiki_do_not_use_smartindent 
set cinkeys +=; " figure out indent when ; is pressed
set shiftround " < and > will hit indentation levels instead of always -4/+4
set scrolloff=4 " Minimal number of screen lines to keep above and below the cursor.
set scrolljump=4 " Minimal number of screen lines to keep above and below the cursor.
set gdefault " set /g by default on :s substitutions
set noerrorbells        " no freaking error bells
set autoread " Reload files changed outside vim
set novisualbell " visual is way too flashy!
"	set statusline=%F%m%r%h%w\ buffer\ %n\ [pos\ %04l,%04v][%p%%]\ [type\ %Y]
if has('statusline')
    set laststatus=2
    " Broken down into easily includeable segments
    set statusline=%<%f\
    set statusline+=%w%h%m%r " Options
    "	    set statusline+=%{fugitive#statusline()} " Git Hotness
    "	    set statusline+=\ [%{&ff}/%Y] " filetype
    set statusline+=\ [%{getcwd()}] " current dir
    "set statusline+=\ [A=\%03.3b/H=\%02.2B] " ASCII / Hexadecimal value of char
    set statusline+=%=%-14.(%l,%c%V%)\ %p%% " Right aligned file nav info
endif


"set smarttab "When on, a <Tab> in front of a line inserts blanks according to
" shiftwidth'.  'tabstop' is used in other places.
"set shiftwidth=4 " Number of spaces to use for each step of (auto)indent.
"set softtabstop=4 " Number of spaces that a <Tab> counts for while performing editing  operations,like inserting a <Tab> or using <BS>.
"set tabstop=4 "Number of spaces that a <Tab> in the file counts for. (Bad 4 Makefiles!)
" set expandtab
set complete=.,b,u,w,t,i,d " buffers used for loop in autocompletion

" Go wild! :)
set wildmenu " When 'wildmenu' is on, command-line completion operates in an enhanced mode.
set wildmode=full " Completion mode that is used for the character specified with  'wildchar'.
set wildchar=<TAB> " Character you have to type to start wildcard expansion in the command-line
set wildignore=*.o,*~,*.bak,.git/*,.hg/*,.svn/* " Tab complete now ignores these
set suffixes=.~,.bak,.class,.o,.aux,.bak,.dvi,.idx,.log,.ps,.swp,.tar " Ignore filename with any of these suffixes when using the :edit command.
set showmode " If in Insert, Replace or Visual mode put a message on the last line.
set showfulltag
set wrap " Lines longer than the width of the window will wrap and displaying continues on the next line.
set nolist " Show tabs as CTRL-I, show end of line with $
"	set terse " Add 's' flag to 'shortmess' option
set verbose=0 " When bigger than zero, Vim will give messages about what it is doing.
set updatecount=200  " write swap file to disk after each 200 characters
set updatetime=5000  " write swap file to disk after 5 inactive seconds
"set gdefault " Adds g to every substitute command

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"					 FOLDING                                                 "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" { START
    set foldenable " Enable folding
    set foldcolumn=1 " left margin
    " Folding stuff
    "autocmd BufNewFile,BufRead   *           syn sync fromstart
    "autocmd BufNewFile,BufRead   *           set foldmethod=manual
    set foldlevel=99
" } END

set formatoptions -=c " Auto-wrap comments using textwidth, inserting the current comment
set nojoinspaces " ???
set langmenu=en " No comment ;)
set comments=sl:/*,mb:**,elx:* " Format Comment
set title " Show title in xterm window
set ttyfast " Improves smoothness of redrawing by assuming a fast connection
set ttyscroll=999 " turn off scrolling -> faster!
set icon " the icon text of the window will be set to the value of the name of the file
set fileformat=unix     " unix file format
"set keywordprg=man\ -s " Program to use for the |K| command
"set listchars=tab:>>.
"set listchars+=trail:.
" set statusline=Vim-%{(Version())} [%02n]\ %(%M%R%H%)\ %F\ %=<%l,%c%V>\ %P
set autoindent   " new line has indentation equal to previous line
set nostartofline " keep the horizontal cursor position when moving vertically

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"					 BACKUP                                                 "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" { START
    set writebackup " yes, make a backup before overwriting a file
    set backup        " keep a backup file
    set backupdir=~/.vim/backupfiles/   " backup dir
    set directory=~/.vim/temp/ " directory is the directory for temp file (e. g. annoying swap files )
    set undofile
    set undolevels=1000 " Maximum number of changes that can be undone.
    set undoreload=1000 " Maximum number of changes that can be undone.

    " create ~/.vim/backupfiles/ if it doesn't exist.
    if has("unix")
        if !isdirectory(expand("~/.vim/backupfiles/."))
            !mkdir -p ~/.vim/backupfiles/
        endif
        if !isdirectory(expand("~/.vim/temp/."))
            !mkdir -p ~/.vim/temp/
        endif
    endif
    set backupext=~         " backup extension
" } END
set makeef=vim.err
set report=0 " show a report when N lines were changed. report=0 thus means show all changes
set shell=/bin/bash " Name of the shell to use for ! and :! commands.
"	set path=.,src/*,src/,src/include/,/usr/local/include/,/usr/local/include/*,/usr/include/,/usr/include/*,, " This is a list of directories which will be searched when using the |gf|, [f, ]f, ^Wf, |:find| and other commands
set path=.,src/*,src/,src/include/,, " This is a list of directories which will be searched when using the |gf|, [f, ]f, ^Wf, |:find| and other commands
set noterse " show search message when wrapping around
"set incsearch       " do incremental searching -> *annoying!*
set smartcase		" ignore case when pattern has at least one upper case character
setlocal omnifunc=syntaxcomplete#Complete " turn on omnicompletion for every file type known
set dictionary+=/usr/share/dict/words " add the dictionary to tab completion
set completeopt-=preview " remove unuseful preview window
set completeopt+=menuone " use the menu also with one match
set completeopt+=longest " add as many information as possible
"	If you want to complete system functions you can do something like this.  Use
"ctags to generate a tags file for all the system header files: >
"	% ctags -R -f ~/.vim/systags /usr/include /usr/local/include
"In your vimrc file add this tags file to the 'tags' option: >
set tags+=~/.vim/systags
set tags+='./.tags,.tags' " add .tags files
"	set tags+='./../tags,../tags,./../.tags,../.tags' " look in the level above
"
" Map K to Man ftplugin
" source: http://nilisnotnull.blogspot.de/2011/10/browsing-man-pages-in-vim.html
let $GROFF_NO_SGR=1
source $VIMRUNTIME/ftplugin/man.vim
nmap K :Man <cword><CR>

set pastetoggle=<F2>
set pumheight=20 "Determines the maximum number of items to show in the popup menu for Insert mode completion.  When zero as much space as available is used. |ins-completion-menu|.
" Open new files from BufExplorer plugin to a new tab
let g:netrw_browse_split =3


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"					 AUTOCOMMAND                        "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" map to <Leader>cf in C++ code
autocmd FileType c,cpp,objc nnoremap <buffer><Leader>cf :<C-u>ClangFormat<CR>
autocmd FileType c,cpp,objc vnoremap <buffer><Leader>cf :ClangFormat<CR>
" if you install vim-operator-user
autocmd FileType c,cpp,objc map <buffer><Leader>x <Plug>(operator-clang-format)



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"					 MAP                                "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" { START
    " change the mapleader from \ to ,
    let mapleader = "," "
    let g:mapleader = ","

    " This saves a looot of time
    nnoremap ; :

    " Enable folding with the spacebar
    nnoremap <space> za

    " f7 toggles spelling on/off
    "nnoremap <F7> :setlocal spell! spell?<CR>

    " With the following in your vimrc, you can press Tab to return to normal mode:
    " http://vim.wikia.com/wiki/Avoid_the_escape_key#Using_the_Tab_key
"    nnoremap <Tab> <Esc>
"    vnoremap <Tab> <Esc>gV
"    onoremap <Tab> <Esc>
"    inoremap <Tab> <Esc>`^
"    inoremap <Leader><Tab> <Tab>

    " Remap ` to ' to go back to the exact character specified on previous
    " mark not just the line
    " http://items.sjbach.com/329/configuring-vim-right
    nnoremap ` '

    " map :w to :W, typical typo
    nmap :W :w

    " map :qw to :wq, typical typo
    nmap :qw :wq

    " Quickly edit/reload the vimrc file
    nmap <leader>ev :e $MYVIMRC<CR>
    nmap <leader>sv :so $MYVIMRC<CR>

    " For when you forget to sudo.. Really Write the file.
    cmap w!! w !sudo tee % >/dev/null
    nmap <leader>n :silent :nohlsearch<CR>

    " Bash like keys for the command line
    " source: https://github.com/amix/vimrc/blob/master/vimrcs/extended.vim
    cnoremap <C-A>	<Home>
    cnoremap <C-E>	<End>
    cnoremap <C-K>	<C-U>


    """"""""""""""""""""""""""""""
    " => Visual mode related
    """"""""""""""""""""""""""""""
    " Visual mode pressing * or # searches for the current selection
    " Super useful! From an idea by Michael Naumann
    " source  https://github.com/amix/vimrc/blob/master/vimrcs/basic.vim
    vnoremap <silent> * :call VisualSelection('f', '')<CR>
    vnoremap <silent> # :call VisualSelection('b', '')<CR>

    " Remap VIM 0 to first non-blank character
    map 0 ^

    " makes CTRL-s save.
    nnoremap <C-s> :w<CR>

    " makes CTRL-q quit.
    nnoremap <C-q> :q<CR>

    " remap jj to esc
    imap jj <Esc>

    "tips via http://blog.sanctum.geek.nz/vim-annoyances/
    "If you want to keep the cursor in place when you join lines with J, you can do this, dropping a mark before the operation to which you return afterwards:
    nnoremap J mzJ`z

    " Center window when searching
    " (disabled because it's annoying)
    "nnoremap n nzz
    "nnoremap } }zz



    """"""""""""""""""""""""""""""
    " => Tab mapping
    """"""""""""""""""""""""""""""
    " { START


        " tab navigation (next tab or next buffer) (firefox style)
        nmap <C-left> :tabprevious<CR>
        nmap <C-right> :tabnext<CR>

        " Useful mappings for managing tabs and windows
        " source https://github.com/amix/vimrc/blob/master/vimrcs/basic.vim
        map <leader>tn :tabnew<cr>
        map <leader>to :tabonly<cr>
        map <leader>tc :tabclose<cr>
        map <leader>tm :tabmove
        map <leader>te :tabedit

        " Open all buffers in new tabs
        map <leader>ts :tab sball<cr>
        map <leader>tb :tab sball<cr>
        map <leader>t<leader> :tabnext<cr>

        " Useful mappings for managing and windows
        " My modification of previous mapping for windows
        map <leader>wn :new<cr>
        map <leader>wc :close<cr>

        " tab navigation like firefox
        nmap <C-pagedown> :tabnext<cr>
        nmap <C-pageup> :tabprevious<cr>
        map <C-S-tab> :tabprevious<cr>
        map <C-tab> :tabnext<cr>
        imap <C-S-tab> <ESC>:tabprevious<cr>i
        "	imap <C-t> <ESC>:tabnew<cr>
        "	map <C-w> :tabclose<cr>
        "	imap <C-w> <ESC>:tabclose<cr>
    " } END

    " Switch automatically from c source to its header file
    nmap ,s :FSHere<CR>

    " F8 open Tagbar window
    nmap <F8> :TagbarToggle<CR>

    "F12 compile and open error window
    command! -nargs=* Make make <args> | cwindow 6
    nmap <F12> :Make<CR>|

" } END

" Put quickfix window always to the bottom
" from https://github.com/fatih/vim-go/issues/108
autocmd FileType qf wincmd J


let g:miniBufExplMapCTabSwitchBufs = 1

function! BufSel(pattern)
  let bufcount = bufnr("$")
  let currbufnr = 1
  let nummatches = 0
  let firstmatchingbufnr = 0
  while currbufnr <= bufcount
    if(bufexists(currbufnr))
      let currbufname = bufname(currbufnr)
      if(match(currbufname, a:pattern) > -1)
        echo currbufnr . ": ". bufname(currbufnr)
        let nummatches += 1
        let firstmatchingbufnr = currbufnr
      endif
    endif
    let currbufnr = currbufnr + 1
  endwhile
  if(nummatches == 1)
    execute ":buffer ". firstmatchingbufnr
  elseif(nummatches > 1)
    let desiredbufnr = input("Enter buffer number: ")
    if(strlen(desiredbufnr) != 0)
      execute ":buffer ". desiredbufnr
    endif
  else
    echo "No matching buffers"
  endif
endfunction

"Bind the BufSel() function to a user-command
command! -nargs=1 Bs :call BufSel("<args>")

:nnoremap <F5> :buffers<CR>:buffer<Space>

set conceallevel=2
set concealcursor=vin

"When using GUI Vim, you can display the tags defined in the current file in a
"menu named "Tags". By default, this feature is turned off. To turn on this
"feature, set the 'Tlist_Show_Menu' variable to 1:
let Tlist_Show_Menu = 1

let g:fsnonewfiles = 1

"https://coderwall.com/p/zneomg
" Syntastic {
    let g:syntastic_error_symbol = '✗✗'
    let g:syntastic_style_error_symbol = '✠✠'
    let g:syntastic_warning_symbol = '∆∆'
    let g:syntastic_style_warning_symbol = '≈≈'
    let g:syntastic_python_checkers = ['python']
" }


" ctrl-p {
" settings for https://kien.github.io/ctrlp.vim/
    let g:ctrlp_cmd = 'CtrlPMixed'

    " via https://github.com/skwp/dotfiles/blob/master/vim/settings/ctrlp.vim
    if exists("g:ctrlp_user_command")
        unlet g:ctrlp_user_command
    endif
    if executable('ag')
        " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
        let g:ctrlp_user_command =
            \ 'ag %s --files-with-matches -g "" --ignore "\tmp$|\.git$\|\.hg$\|\.svn$"'
        " ag is fast enough that CtrlP doesn't need to cache
        let g:ctrlp_use_caching = 0
    else
        " Fall back to using git ls-files if Ag is not available
        let g:ctrlp_custom_ignore = '\.git$\|\.hg$\|\.svn$'
        let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files . --cached --exclude-standard --others']
    endif
" }

" https://stackoverflow.com/questions/21743323/youcompleteme-freezes-when-used-with-python-mode
" python-mode {
    let g:pymode_rope_complete_on_dot = 0
    let g:pymode_rope_completion = 1
    "let g:pymode_rope = 0
    let g:pymode_rope_lookup_project = 0
    let g:pymode_options_max_line_length = 512
    "let g:pymode_lint_write = 0
" }

" jedi-vim {
        "let g:jedi#auto_vim_configuration = 0
        "let g:jedi#popup_on_dot = 0
        "let g:jedi#popup_select_first = 0
        "let g:jedi#completions_enabled = 1
        "let g:jedi#completions_command = ""
        "let g:jedi#show_call_signatures = "1"
        "let g:jedi#goto_assignments_command = "<leader>pa"
        "let g:jedi#goto_definitions_command = "<leader>pd"
        "let g:jedi#documentation_command = "<leader>pk"
        "let g:jedi#usages_command = "<leader>pu"
        "let g:jedi#rename_command = "<leader>pr"
" }
" YouCompleteMe {
    map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>
    let g:ycm_confirm_extra_conf=0
    let g:ycm_autoclose_preview_window_after_completion=1
    "let g:ycm_filetype_specific_completion_to_disable = { 'python' : 1 }
    "let g:ycm_filetype_blacklist = { 'python' : 1 }
    let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/.ycm_extra_conf.py'
    let g:ycm_collect_identifiers_from_tags_files = 1 " Let YCM read tags from Ctags file
    let g:ycm_seed_identifiers_with_syntax = 1 " Completion for programming language's keyword
    let g:ycm_complete_in_comments = 1 " Completion in comments
    let g:ycm_complete_in_strings = 1 " Completion in string
    " Apply YCM FixIt
    let g:ycm_filetype_blacklist = { 'latex': 1 }
    "let g:ycm_key_list_select_completion = ['<C-j>', '<Down>']
    "let g:ycm_key_list_previous_completion = ['<C-k>', '<Up>']
" }
"

nmap <C-V> "+gP
imap <C-V> <ESC><C-V>i
vmap <C-C> "+y
set showbreak=↪

let g:clang_format#style_options = {
            \ "AccessModifierOffset" : -4,
            \ "AllowShortIfStatementsOnASingleLine" : "true",
            \ "AlwaysBreakTemplateDeclarations" : "true",
            \ "Standard" : "C++11"}

